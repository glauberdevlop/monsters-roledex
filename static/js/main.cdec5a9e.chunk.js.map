{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","Container","Image","alt","src","monster","id","H1","name","Email","email","styled","div","h1","p","img","CardList","monsters","map","key","SearchBox","placeholder","handleChange","Input","type","onChange","input","App","e","setState","searcheFile","target","value","state","fetch","then","res","json","users","this","filterMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"65BAGA,IAUeA,EAVF,SAACC,GACV,OACI,kBAACC,EAAD,KACI,kBAACC,EAAD,CAAOC,IAAI,UAAUC,IAAG,+BAA0BJ,EAAMK,QAAQC,GAAxC,4BACxB,kBAACC,EAAD,KAAKP,EAAMK,QAAQG,MACnB,kBAACC,EAAD,KAAQT,EAAMK,QAAQK,SAO5BT,EAAYU,IAAOC,IAAV,KAiBTL,EAAKI,IAAOE,GAAV,KAIFJ,EAAQE,IAAOG,EAAV,KAILZ,EAAQS,IAAOI,IAAV,K,6LCnCX,IAWeC,EAXE,SAAAhB,GAEb,OACI,kBAAC,EAAD,KACKA,EAAMiB,SAASC,KAAI,SAACb,GAAD,OACjB,kBAAC,EAAD,CAAMc,IAAKd,EAAQC,GAAKD,QAASA,SAQ1CJ,EAAYU,IAAOC,IAAV,K,wNCff,IAWeQ,EAXG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC7B,OAEI,kBAACC,EAAD,CACEC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KAOdC,EAAQZ,IAAOe,MAAV,K,kPCqCIC,E,kDA7Cb,aAAe,IAAD,8BACZ,gBAcFL,aAAe,SAACM,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXhB,SAAU,GACVa,YAAa,IALH,E,gEASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEZ,SAAUqB,S,+BAOnC,IAAD,EAE2BC,KAAKN,MAA/BhB,EAFD,EAECA,SAAUa,EAFX,EAEWA,YACZU,EAAiBvB,EAASwB,QAAO,SAAApC,GAAO,OAC5CA,EAAQG,KAAKkC,cAAcC,SAASb,EAAYY,kBAGlD,OAEI,kBAAC,EAAD,KAEE,kBAAC,EAAD,yBAEA,kBAAC,EAAD,CACErB,YAAY,cACZC,aAAciB,KAAKjB,eAGrB,kBAAC,EAAD,CAAUL,SAAUuB,S,GAvCZI,IAAMC,WAiDlB5C,EAAYU,IAAOC,IAAV,KAITL,EAAKI,IAAOE,GAAV,KC/CYiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cdec5a9e.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <Container>\r\n            <Image alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n            <H1>{props.monster.name}</H1>\r\n            <Email>{props.monster.email}</Email>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n\r\nconst Container = styled.div`\r\n   display:flex;\r\n   flex-direction:column;\r\n   background-color:#95dada;\r\n   border: 1px solid grey;\r\n   border-radius:5px;\r\n   padding:25px;\r\n   cursor:pointer;\r\n   -moz-osx-font-smoothing:greyscale;\r\n   backface-visibility:hidden;\r\n   transform:translateZ(0);\r\n   transition:transform 0.25s ease-out;\r\n   &:hover{\r\n       transform:scale(1.05);\r\n   }\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n   \r\n`;\r\n\r\nconst Email = styled.p`\r\n   \r\n`;\r\n\r\nconst Image = styled.img`\r\n \r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Card from '../card/card.component';\r\n\r\nconst CardList = props => {\r\n\r\n    return (\r\n        <Container>\r\n            {props.monsters.map((monster) => (\r\n               <Card key={monster.id}  monster={monster} />\r\n            ))}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CardList;\r\n\r\nconst Container = styled.div`\r\n   width:85vw;\r\n   margin: 0 auto;\r\n   display:grid;\r\n   grid-template-columns: 1fr 1fr 1fr 1fr;\r\n   grid-gap: 25px;\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst SearchBox = ({placeholder, handleChange}) => {\r\n    return(\r\n\r\n        <Input \r\n          type=\"search\"\r\n          placeholder={placeholder}\r\n          onChange={handleChange}\r\n        />\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n\r\nconst Input = styled.input`\r\n  -webkit-appearance: none;\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px;\r\n  width: 150px;\r\n  line-height: 30px;\r\n  margin-bottom: 30px;\r\n`;","import React from 'react';\nimport styled from 'styled-components';\n\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searcheFile: \"\"\n    }\n  };\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => this.setState({ monsters: users }))\n  };\n\n  handleChange = (e) => {\n    this.setState({ searcheFile: e.target.value })\n  }\n\n  render() {\n\n    const { monsters, searcheFile } = this.state\n    const filterMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searcheFile.toLowerCase())\n    );\n\n    return (\n     \n        <Container>\n\n          <H1>Monsters Roledex</H1>\n\n          <SearchBox\n            placeholder=\"serche file\"\n            handleChange={this.handleChange}\n          />\n\n          <CardList monsters={filterMonsters} />\n\n        </Container>\n\n    );\n  }\n}\n\nexport default App;\n\nconst Container = styled.div`\n   text-align: center;\n`;\n\nconst H1 = styled.h1`\n   font-family:'Bigelow Rules';\n   font-size:72px;\n   color:#0ccac4;\n`;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}